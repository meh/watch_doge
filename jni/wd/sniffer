#pragma once

#include <wd/common>
#include <wd/packet/packer>

namespace wd {
	template<typename T, size_t MAX_BLOCK_SIZE = 512>
	using queue = typename moodycamel::BlockingReaderWriterQueue<T, MAX_BLOCK_SIZE>;

	class sniffer {
		public:
			struct command {
				int                            request;
				int                            type;
				std::variant<std::optional<std::string>> data;
			};

			class cache {
				public:
					struct header {
						uint32_t magic_number;

						uint16_t version_major;
						uint16_t version_minor;

						int32_t  thiszone;
						uint32_t sigfigs;

						uint32_t snaplen;
						uint32_t network;
					};

				public:
					cache(std::string path, int id, uint32_t truncate = 65535);

				public:
					uint32_t
					add(const packet::header* header, const uint8_t* packet);

					std::optional<std::tuple<const packet::header*, const uint8_t*>>
					get(uint32_t id);

				private:
					std::string _session;
					std::string _index;

					std::ifstream _isession;
					std::ifstream _iindex;

					std::ofstream _osession;
					std::ofstream _oindex;

					uint32_t _id;
					uint32_t _offset;
					uint32_t _truncate;

					packet::header       _header;
					std::vector<uint8_t> _buffer;
			};

		public:
			sniffer(int id, std::string device, std::string cache, uint32_t truncate);
			~sniffer();

			void start(int request);
			void filter(int request, std::optional<std::string> flt);
			void stop(int request);

			std::optional<std::tuple<const packet::header*, const uint8_t*>>
			get(uint32_t id);

		private:
			int         _id;
			std::string _device;

			std::shared_ptr<cache>          _cache;
			std::shared_ptr<queue<command>> _queue;
			std::thread                     _thread;
	};
}
