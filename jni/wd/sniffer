#pragma once

#include <thread>
#include <string>
#include <memory>

#include <optional.hpp>
#include <errno.h>
#include <readerwriterqueue.h>

#include <stdint.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <msgpack.hpp>
#include <pcap.h>

namespace wd {
	using std::string;
	using std::experimental::optional;
	using std::thread;
	using std::shared_ptr;

	template<typename T, size_t MAX_BLOCK_SIZE = 512>
	using queue = typename moodycamel::BlockingReaderWriterQueue<T, MAX_BLOCK_SIZE>;

	namespace packet {
		typedef struct pcap_pkthdr header;
	}

	class sniffer {
	public:
		struct command {
			union Data {
				optional<string>* filter;
			};

			int  request;
			int  type;
			Data data;
		};

	public:
		sniffer(int id, string device);
		~sniffer();

		void start(int request);
		void filter(int request, optional<string> flt);
		void stop(int request);

	private:
		int    _id;
		string _device;

		shared_ptr<queue<command>> _queue;
		thread                     _thread;
	};
}
