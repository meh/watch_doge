#include <iostream>
#include <stdint.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <msgpack.hpp>
#include <pcap.h>

namespace wd {
	namespace packet {
		typedef struct pcap_pkthdr header;
		typedef char unknown;

		#define ETHER_ADDR_LEN 6

		struct ether {
			uint8_t destination[ETHER_ADDR_LEN];
			uint8_t source[ETHER_ADDR_LEN];

			enum : uint16_t {
				IPv4 = 0x0800,
				ARP  = 0x0806,
				IPv6 = 0x86DD,
			} type;
		};

		struct ip {
			uint8_t header  : 4,
			        version : 4;

			uint8_t dscp : 6,
			        ecn  : 2;

			uint16_t length;
			uint16_t id;

			uint16_t flags  : 3,
			         offset : 13;

			uint8_t ttl;

			enum : uint8_t {
				ICMP = 0x01,
				TCP  = 0x06,
			} protocol;

			uint16_t checksum;

			in_addr source;
			in_addr destination;

			struct icmp {
				enum : uint8_t {
					ECHO_REPLY              = 0,
					DESTINATION_UNREACHABLE = 3,
					SOURCE_QUENCH           = 4,
					REDIRECT_MESSAGE        = 5,
					ECHO_REQUEST            = 8,
					ROUTER_ADVERTISEMENT    = 9,
					ROUTER_SOLICITATION     = 10,
					TIME_EXCEEDED           = 11,
					PARAMETER_PROBLEM       = 12,
					TIMESTAMP               = 13,
					TIMESTAMP_REPLY         = 14,
					INFORMATION_REQUEST     = 15,
					INFORMATION_REPLY       = 16,
					ADDRESS_MASK_REQUEST    = 17,
					ADDRESS_MASK_REPLY      = 18,
					TRACEROUTE              = 30,
				} type;

				enum destination_unreachable : uint8_t {
					DESTINATION_NETWORK_UNREACHABLE           = 0,
					DESTINATION_HOST_UNREACHABLE              = 1,
					DESTINATION_PROTOCOL_UNREACHABLE          = 2,
					DESTINATION_PORT_UNREACHABLE              = 3,
					FRAGMENTATION_REQUIRED                    = 4,
					SOURCE_ROUTE_FAILED                       = 5,
					DESTINATION_NETWORK_UNKNOWN               = 6,
					DESTINATION_HOST_UNKNOWN                  = 7,
					SOURCE_HOST_ISOLATED                      = 8,
					NETWORK_ADMINISTRATIVELY_PROHIBITED       = 9,
					HOST_ADMINISTRATIVELY_PROHIBITED          = 10,
					NETWORK_UNREACHABLE_FOR_TOS               = 11,
					HOST_UNREACHABLE_FOR_TOS                  = 12,
					COMMUNICATION_ADMINISTRATIVELY_PROHIBITED = 13,
					HOST_PRECEDENCE_VIOLATION                 = 14,
					PRECEDENT_CUTOFF_IN_EFFECT                = 15,
				};

				enum redirect_message : uint8_t {
					REDIRECT_DATAGRAM_FOR_NETWORK         = 0,
					REDIRECT_DATAGRAM_FOR_HOST            = 1,
					REDIRECT_DATAGRAM_FOR_TOS_AND_NETWORK = 2,
					REDIRECT_DATAGRAM_FOR_TOS_AND_HOST    = 3,
				};

				enum parameter_problem : uint8_t {
					POINTER_INDICATES_ERROR = 0,
					MISSING_REQUIRED_OPTION = 1,
					BAD_LENGTH              = 2,
				};

				union {
					uint8_t raw;

					enum destination_unreachable destination_unreachable;
					enum redirect_message        redirect_message;
					enum parameter_problem       parameter_problem;
				} code;

				uint16_t checksum;
			};
		};

		void pack(msgpack::packer<std::ostream>& packer, const header* header, size_t offset, const unknown*);

		void pack(msgpack::packer<std::ostream>& packer, const header* header, const ether*);
		void pack(msgpack::packer<std::ostream>& packer, const header* header, const ether*, const ip*);
		void pack(msgpack::packer<std::ostream>& packer, const header* header, const ether*, const ip*, const ip::icmp*);
	}
}
