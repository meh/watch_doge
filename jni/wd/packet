#include <iostream>
#include <stdint.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <msgpack.hpp>
#include <pcap.h>

namespace wd {
	namespace packet {
		typedef struct pcap_pkthdr header;
		typedef char unknown;

		#define ETHER_ADDR_LEN 6

		struct ethernet {
			uint8_t destination[ETHER_ADDR_LEN];
			uint8_t source[ETHER_ADDR_LEN];

			enum : uint16_t {
				IPv4 = 0x0800,
				ARP  = 0x0806,
				IPv6 = 0x86DD,
			} type;
		};

		struct ip {
			uint8_t version : 4;
			uint8_t header  : 4;

			uint8_t dscp    : 6;
			uint8_t ecn     : 2;

			uint16_t length;
			uint16_t id;

			uint16_t flags  : 3;
			uint16_t offset : 13;

			uint8_t ttl;

			enum : uint8_t {
				ICMP = 0x01,
				TCP  = 0x06,
			} protocol;

			uint16_t checksum;

			in_addr source;
			in_addr destination;
		};

		void pack(msgpack::packer<std::ostream>& packer, const header* header, size_t offset, const unknown* packet);
		void pack(msgpack::packer<std::ostream>& packer, const header* header, size_t offset, const ethernet* packet);
		void pack(msgpack::packer<std::ostream>& packer, const header* header, size_t offset, const ip* packet);
	}
}
