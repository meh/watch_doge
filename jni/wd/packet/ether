#pragma once

#include <wd/sniffer>

#define ETHER_ADDR_LEN 6

namespace wd {
	namespace packet {
		class ether {
			public:
				struct raw {
					uint8_t  destination[ETHER_ADDR_LEN];
					uint8_t  source[ETHER_ADDR_LEN];
					uint16_t type;
				};

				enum type : uint16_t {
					IPv4 = 0x0800,
					ARP  = 0x0806,
					IPv6 = 0x86DD,
				};

			public:
				static std::string address(const uint8_t* addr);

			private:
				const raw* packet;

			public:
				ether(const raw* p) : packet(p) { }

				size_t pack(msgpack::packer<std::ostream>& packer);
				size_t pack(msgpack::packer<std::ostream>& packer, const header* header);

			public:
				std::string destination() const;
				std::string source() const;

				enum type type() const;
		};
	}
}
