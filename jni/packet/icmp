#pragma once

#include <packet/common>
#include <packet/ip>

namespace wd {
	namespace packet {
		class icmp {
			public:
				struct raw {
					uint8_t type;
					uint8_t code;

					uint16_t checksum;
				};

				class echo {
					public:
						struct raw {
							uint16_t identifier;
							uint16_t sequence;

							char data[0];
						};

					private:
						const raw* packet;

					public:
						echo(const raw* packet) : packet(packet) { }

					public:
						uint16_t identifier() const;
						uint16_t sequence() const;

						size_t length(const header* header, size_t offset) const;
						const char* data() const;
				};

				class timestamp {
					public:
						struct raw {
							uint16_t identifier;
							uint16_t sequence;

							uint32_t originate;
							uint32_t receive;
							uint32_t transmit;
						};

					private:
						const raw* packet;

					public:
						timestamp(const raw* packet) : packet(packet) { }

					public:
						uint16_t identifier() const;
						uint16_t sequence() const;

						uint32_t originate() const;
						uint32_t receive() const;
						uint32_t transmit() const;
				};

				class information {
					public:
						struct raw {
							uint16_t identifier;
							uint16_t sequence;
						};

					private:
						const raw* packet;

					public:
						information(const raw* packet) : packet(packet) { }

					public:
						uint16_t identifier() const;
						uint16_t sequence() const;
				};

				class parameter_problem {
					public:
						struct raw {
							uint8_t pointer;
							uint8_t _[3];

							char payload[0];
						};

					private:
						const raw* packet;

					public:
						parameter_problem(const raw* packet) : packet(packet) { }

					public:
						uint8_t pointer() const;

						ip          header() const;
						const char* data() const;
				};

				class redirect_message {
					public:
						struct raw {
							in_addr gateway;

							char payload[0];
						};

					private:
						const raw* packet;

					public:
						redirect_message(const raw* packet) : packet(packet) { }

					public:
						std::string gateway() const;

						ip          header() const;
						const char* data() const;
				};

				class previous {
					public:
						struct raw {
							uint8_t _[4];

							char payload[0];
						};

					private:
						const raw* packet;

					public:
						previous(const raw* packet) : packet(packet) { }

					public:
						ip          header() const;
						const char* data() const;
				};

				enum type : uint8_t {
					ECHO_REPLY              = 0,
					DESTINATION_UNREACHABLE = 3,
					SOURCE_QUENCH           = 4,
					REDIRECT_MESSAGE        = 5,
					ECHO_REQUEST            = 8,
					ROUTER_ADVERTISEMENT    = 9,
					ROUTER_SOLICITATION     = 10,
					TIME_EXCEEDED           = 11,
					PARAMETER_PROBLEM       = 12,
					TIMESTAMP_REQUEST       = 13,
					TIMESTAMP_REPLY         = 14,
					INFORMATION_REQUEST     = 15,
					INFORMATION_REPLY       = 16,
					ADDRESS_MASK_REQUEST    = 17,
					ADDRESS_MASK_REPLY      = 18,
					TRACEROUTE              = 30,
				};

				struct code {
					enum destination_unreachable : uint8_t {
						DESTINATION_NETWORK_UNREACHABLE           = 0,
						DESTINATION_HOST_UNREACHABLE              = 1,
						DESTINATION_PROTOCOL_UNREACHABLE          = 2,
						DESTINATION_PORT_UNREACHABLE              = 3,
						FRAGMENTATION_REQUIRED                    = 4,
						SOURCE_ROUTE_FAILED                       = 5,
						DESTINATION_NETWORK_UNKNOWN               = 6,
						DESTINATION_HOST_UNKNOWN                  = 7,
						SOURCE_HOST_ISOLATED                      = 8,
						NETWORK_ADMINISTRATIVELY_PROHIBITED       = 9,
						HOST_ADMINISTRATIVELY_PROHIBITED          = 10,
						NETWORK_UNREACHABLE_FOR_TOS               = 11,
						HOST_UNREACHABLE_FOR_TOS                  = 12,
						COMMUNICATION_ADMINISTRATIVELY_PROHIBITED = 13,
						HOST_PRECEDENCE_VIOLATION                 = 14,
						PRECEDENT_CUTOFF_IN_EFFECT                = 15,
					};

					enum redirect_message : uint8_t {
						REDIRECT_DATAGRAM_FOR_NETWORK         = 0,
						REDIRECT_DATAGRAM_FOR_HOST            = 1,
						REDIRECT_DATAGRAM_FOR_TOS_AND_NETWORK = 2,
						REDIRECT_DATAGRAM_FOR_TOS_AND_HOST    = 3,
					};

					enum parameter_problem : uint8_t {
						POINTER_INDICATES_ERROR = 0,
						MISSING_REQUIRED_OPTION = 1,
						BAD_LENGTH              = 2,
					};
				};

			private:
				const raw* packet;

			public:
				icmp(const raw* p) : packet(p) { }

				size_t pack(msgpack::packer<std::ostream>& packer, const header* header, const ether::raw*, const ip::raw*);

			public:
				enum type type() const;

				template<typename T>
				T code() const;

				uint16_t checksum() const;

				template<typename T>
				T details() const;
		};

		std::optional<std::string> to_string(enum icmp::type type);
		std::optional<std::string> to_string(enum icmp::code::destination_unreachable code);
		std::optional<std::string> to_string(enum icmp::code::redirect_message code);
		std::optional<std::string> to_string(enum icmp::code::parameter_problem code);
	}
}
