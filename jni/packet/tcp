#pragma once

#include <packet/common>

namespace wd {
	namespace packet {
		class tcp {
			public:
				struct raw {
					uint16_t source;
					uint16_t destination;

					uint32_t sequence;
					uint32_t acknowledgement;

					uint16_t offset_and_flags;
					uint16_t window;

					uint16_t checksum;
					uint16_t urgent;

					char payload[0];
				};

			private:
				const raw* packet;

			public:
				tcp(const raw* p) : packet(p) { }

				size_t pack(msgpack::packer<std::ostream>& packer, const header* header, const ether::raw*, const ip::raw*);

			public:
				uint16_t source() const;
				uint16_t destination() const;

				uint32_t sequence() const;
				uint32_t acknowledgement() const;

				uint8_t offset() const;

				std::bitset<6> flags() const;
				bool urg() const;
				bool ack() const;
				bool psh() const;
				bool rst() const;
				bool syn() const;
				bool fin() const;

				uint16_t window() const;

				uint16_t checksum() const;
				uint16_t urgent() const;

				const char* data() const;
		};
	}
}
